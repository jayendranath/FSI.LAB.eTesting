@{
    //ViewBag.Title = "Exam Scheduler Details";

}
@*<script src='~/scripts/jquery-latest.min.js' type='text/javascript'></script>*@
<script src="~/Scripts/angular.min.js"></script>
<script src="~/Content/js/plugins/jquery/jquery-2.2.4.min.js"></script>
<script src="~/Scripts/jquery-ui.min.js"></script>
<link href="~/Scripts/jquery-ui.css" rel="stylesheet" />
<script src="~/Scripts/knockout-3.4.2.js" type="text/javascript"></script>
<script src="~/Controllers/Proctor.js"></script>
<style type="text/css">
    .dont-break-out {

  /* These are technically the same, but use both */
  overflow-wrap: break-word;
  word-wrap: break-word;

  -ms-word-break: break-all;
  /* This is the dangerous one in WebKit, as it breaks things wherever */
  word-break: break-all;
  /* Instead use this non-standard one: */
  word-break: break-word;

  /* Adds a hyphen where the word breaks, if supported (No Blink) */
  -ms-hyphens: auto;
  -moz-hyphens: auto;
  -webkit-hyphens: auto;
  hyphens: auto;

}
    .content-header {
        display: none;
    }
</style>
<script id="tableRow" type="text/javascript">
    var addExRow = '<tr>';
    addExRow += '<td style="width:5%">';
                        addExRow += '<input type="text" class="form-control" />';
                        addExRow += '</td>';
                        addExRow += '<td style="width:40%">';
                        addExRow += '<input type="text" class="form-control" />';
                        addExRow += '</td>';
                        addExRow += '<td class=".dont-break-out" style="width:50%";>';
                        addExRow += '<input type="text" class="form-control" />';
                        addExRow += '</td>';
                        addExRow += '<td style="width:5%">';
                        addExRow += '<button type="button" class="btn btn-group-lg btn-primary dropdown-toggle" style="width:110px;" onclick="deleteRow(this)">';

                        addExRow += '            Delete';
                        addExRow += '</button>';
                        addExRow += '</td>';
                        addExRow += '</tr>';
</script>

<script type="text/javascript">
    function deleteRow(row) {
        var i = row.parentNode.parentNode.rowIndex;
        document.getElementById('tblExaminee').deleteRow(i);
    }
    $(function () {
        $("#txtProgram").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: "../Home/GetProgramTitleAutoComplete",
                    type: "GET",
                    dataType: "json",
                    data: { Prefix: request.term },
                    success: function (data) {
                        data = JSON.parse(data);
                        if (data.length > 0) {
                            response($.map(data, function (item) {
                                $("#txtAssessment").val('')
                                $("#txtAssessment").attr("tag", "");
                                return {
                                    label: item.ProgramTitle = "MX-Cessna 525C (Williams FJ44)",
                                    value: item.ProgramTitle,
                                    id: item.ProgramId
                                };
                            }))
                        }
                        else {
                            response([{ label: "No results found", value: -1 }]);
                        }
                    }
                })
            },
            select: function (request, response) {
                $("#txtProgram").attr("tag", response.item.id);
            }
        }).focus(function () {
            $(this).autocomplete("search", "");
        });


        $("#txtAssessment").autocomplete({
            source: function (request, response) {
                var dataJson = { "Prefix": request.term, "ProgramId": $('#txtProgram').attr("tag") };
                var programId = $('#txtProgram').attr("tag");
                $.ajax({
                    url: "../Home/GetAssessmentAutoComplete",
                    type: "GET",
                    dataType: "json",
                    data: { Prefix: request.term, ProgramId: programId },
                    success: function (data) {
                        data = JSON.parse(data);
                        if (data.length > 0) {
                            response($.map(data, function (item) {
                                return {
                                    label: item.AssessmentTitle,
                                    value: item.AssessmentTitle,
                                    id: item.AssessmentId
                                };
                            }))
                        }
                        else {
                            response([{ label: "No results found", value: -1 }]);
                        }
                    }
                })
            },
            select: function (request, response) {
                $("#txtAssessment").attr("tag", response.item.id);
                $("#txtDuration").val("60");
            }
        }).focus(function () {
            $(this).autocomplete("search", "");
        });


        $("#txtProctor").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: "../Home/GetProctorUserAutoComplete",
                    type: "GET",
                    dataType: "json",
                    data: { Prefix: request.term },
                    success: function (data) {
                        if (data.length > 0) {
                            response($.map(data, function (item) {
                                return {
                                    label: item.label,
                                    value: item.label,
                                    id: item.value
                                };
                            }))
                        }
                        else {
                            response([{ label: "No results found", value: -1 }]);
                        }
                    }
                })
            },
            select: function (request, response) {
                $("#txtProctor").attr("tag", response.item.id);
            }
        }).focus(function () {
            $(this).autocomplete("search", "");
        });


        $("#txtCourse").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: "../Home/GetCourseAutoComplete",
                    type: "GET",
                    dataType: "json",
                    data: { Prefix: request.term },
                    success: function (data) {
                        if (data.length > 0) {
                            response($.map(data, function (item) {
                                return {
                                    label: item.label,
                                    value: item.label,
                                    id: item.value
                                };
                            }))
                        }
                        else {
                            response([{ label: "No results found", value: -1 }]);
                        }
                    }
                })
            },
            select: function (request, response) {
                $("#txtCourse").attr("tag", response.item.id);
                var strData = response.item.id;
                var arrData = strData.split("~");
                $("#txtProgram").attr("tag", arrData[1]);
                $("#txtProgram").val(arrData[2]);
                angular.element(document.getElementById('txtCourse')).scope().GetExaminees(arrData[0]);
            }
        }).focus(function () {
            $(this).autocomplete("search", "");
        });
           
        //var availableClassTitle = [
        //  "Caravan G1000 Pilot Recurrent + Wichita Cessna + 03-Jan-18",
        //  "Caravan G1000 Pilot  Recurrent + Wichita Cessna + 05-Mar-18",
        //  "Caravan I (CE-208) Recurrent + Wichita Cessna + 03-Jan-18",
        //  "Caravan I (CE-208) Recurrent + Wichita Cessna + 05-Mar-18",
        //  "Caravan G600 Pilot Recurrent + Wichita Cessna + 03-Jan-18",
        //  "Caravan G600 Pilot Recurrent + Wichita Cessna + 05-Mar-18",
        //  "Caravan G1000 Pilot Recurrent + Wichita East Learning Center + 03-Jan-18",
        //    "Caravan G1000 Pilot Recurrent + Wichita East Learning Center + 10-Feb-18",
        //    "Caravan I (CE-208) Recurrent + Wichita East Learning Center + 03-Jan-18",
        //    "Caravan I (CE-208) Recurrent + Wichita East Learning Center + 10-Feb-18",
        //    "Caravan G600 Pilot Recurrent + Wichita East Learning Center + 03-Jan-18",
        //    "Caravan G600 Pilot Recurrent + Wichita East Learning Center + 10-Feb-18"
        //];
        //$("#txtClassTitle").autocomplete({
        //    source: availableClassTitle
        //});
    });
    function tableRow(number, ownerViewModel) {
        this.number = ko.observable(number);
        this.remove = function () {
            ownerViewModel.tableRows.destroy(this);
        }
    }

    function tableRowsViewModel() {
        var that = this;
        this.tableRows = ko.observableArray([]);
        this.addNewRow = function () {
            //this.tableRows.push(new tableRow('', that));
            $('#tblExaminee').append(addExRow);
        }
        this.addNewRow();

        //dependentObservable to represent the last row's value
        this.lastRowValue = ko.dependentObservable(function () {
            var rows = that.tableRows();
            return rows.length ? rows[rows.length - 1].number() : null;
        });

        //subscribe to changes to the last row
        this.lastRowValue.subscribe(function (newValue) {
            if (newValue) {
                that.tableRows.push(new tableRow('', that));
            }
        });
    }



    $(document).ready(function () {
        ko.applyBindings(new tableRowsViewModel());

        $('#AlgoToolTip').attr("title", '<table style="table-layout:fixed;"><tr><td style="max-width:150px;">Random – No 2 examinees will get the exact same question paper</td></tr><tr><td> Alternate – Every other exam gets a different question paper</td></tr></table>');
    });


    $(function () {
        $("#btnAddExaminee").click(function () {
            ///create table dynamic
            var prgtbid = '';
            var tbcontent = '';
            $("#exmstcount tr").each(function () {
                prgtbid += $(this).find("td:first").text() + ","; //put elements into array
            });
            tbcontent += '<tr><td style="display:none;">' + $(this).attr('value') + '</td>';
            tbcontent += '<td ><div  contenteditable="true">Name';
            //tbcontent += '</td><td><div contenteditable="true" class="text-right" onkeypress="return IsNumberKeyed(event)">0</div></td><td><div  contenteditable="true" class="text-right"  onkeypress="return IsNumberKeyed(event)">0</div></td><td><div  contenteditable="true" class="text-right" onkeypress="return IsNumberKeyed(event)">0</div></td></tr>';
            tbcontent += '</td><td><div  contenteditable="true">email</div></td><td><button type="button" class="btn btn-group-lg btn-primary dropdown-toggle" id="btnAddExaminee">Delete</button></td></tr>';
            $('#exmstcount').append(tbcontent);

        });
    });
</script>
<div class="row" ng-app="appProctor" ng-controller="conProctor" id="divExamScheduler" data-ng-init="GetExamScheduler(@ViewData["sid"])">
    <div>
        <input type="hidden" ng-model="examScheduleModel.ScheduleId" name="sid" />
    </div>
    <div class="col-xs-12 col-md-7">
        <div class="box-header with-border">
            <h3 class="box-title">Exam Schedule</h3>
        </div>
        <div class="box box-default">
            <div class="box-body">
                <!--Class -->
                <div class="row">
                    <div class="form-group" style="margin-top:5px">
                        <div class="col-xs-7 col-md-4">
                            <label>Course</label>
                        </div>
                        <div class="col-xs-7 col-md-8">
                            <input type="text" ng-model="Course" id="txtCourse" class="form-control" placeholder="Enter Course">
                        </div>
                    </div>
                </div>

                <!--Program title -->
                <div class="row">
                    <div class="form-group" style="margin-top:5px">
                        <div class="col-xs-7 col-md-4">
                            <label>Program</label>
                        </div>
                        <div class="col-xs-7 col-md-8">
                            <input type="text" ng-model="ProgramTitle" class="form-control" id="txtProgram" placeholder="Select Program">
                        </div>
                    </div>
                </div>
                <!--Assessment Selection -->
                <div class="row">
                    <div class="form-group" style="margin-top:5px">
                        <div class="col-xs-7 col-md-4">
                            <label>Assessment</label>
                        </div>
                        <div class="col-xs-7 col-md-8">
                            <input type="text" ng-model="AssessmentTitle" class="form-control" id="txtAssessment" placeholder="Select Assessment">
                        </div>
                    </div>
                </div>
                <!--Date and Time-->
                <div class="row">
                    <div class="form-group" style="margin-top:5px">
                        <div class="col-xs-7 col-md-4">
                            <label>Examination Date</label>
                        </div>
                        <div class="col-xs-7 col-md-8">
                            <div class="input-group date">
                                <div class="input-group-addon">
                                    <i class="fa fa-calendar"></i>
                                </div>
                                <input type="text" ng-model="ScheduleDate" class="form-control pull-right datepicker" placeholder="Enter Examination Date">
                                <div class="input-group-addon">
                                    <i class="fa fa-calendar-times-o"></i>
                                </div>
                                <input type="text" class="form-control" data-inputmask="'alias': 'hh:mm'" data-mask="">
                            </div>
                        </div>
                    </div>
                </div>
                <!--Duration -->
                <div class="row">
                    <div class="form-group" style="margin-top:5px">
                        <div class="col-xs-7 col-md-4">
                            <label>Duration (Mins)</label>
                        </div>
                        <div class="col-xs-7 col-md-8">
                            <input type="text" ng-model="Duration" class="form-control" id="txtDuration" placeholder="Duration">
                        </div>
                    </div>
                </div>
                <!-- Pass Percentage -->
                <div class="row">
                    <div class="form-group" style="margin-top:5px">
                        <div class="col-xs-7 col-md-4">
                            <label>Pass Percentage</label>
                        </div>
                        <div class="col-xs-7 col-md-8">
                            <input type="text"  value="75%"  class="form-control" id="txtPassPercent" placeholder="Pass Percentage">
                        </div>
                    </div>
                </div>
                <!--Learning Center -->
                <div class="row">
                    <div class="form-group" style="margin-top:5px">
                        <div class="col-xs-7 col-md-4">
                            <label>Learning Center</label>
                        </div>
                        <div class="col-xs-7 col-md-8" data-ng-init="GetCenters()">
                            <select name="centers" ng-options="center.CenterName for center in centerlist" ng-model="LearningCenterId" style="width:100%;">
                                <option value="">Select Learning Center</option>
                            </select>
                        </div>
                    </div>
                </div>
                <!--Room Number -->
                <div class="row">
                    <div class="form-group" style="margin-top:5px">
                        <div class="col-xs-7 col-md-4">
                            <label>Room Number</label>
                        </div>
                        <div class="col-xs-7 col-md-8">
                            <input type="text" ng-model="RoomNumber" class="form-control" id="txtRoomNumber" placeholder="Enter Room Number">
                        </div>
                    </div>
                </div>
                <!--Proctor -->
                <div class="row">
                    <div class="form-group" style="margin-top:5px">
                        <div class="col-xs-7 col-md-4">
                            <label>Proctor(s)</label>
                        </div>
                        <div class="col-xs-7 col-md-8">
                            <input type="text" ng-model="ProctorUserName" id="txtProctor" multiple class="form-control" placeholder="Select Proctor">    
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="box-header">
            <div class="row">

                <div class="col-xs-7 col-md-4">

                </div>
                <div class="col-xs-7 col-md-8">
                    <button type="button" class="btn btn-group-lg btn-primary dropdown-toggle" id="btnSubmit" style="width:110px">
                        Submit
                    </button>
                    <button type="button" class="btn btn-group-lg btn-primary dropdown-toggle" id="btnCancel" onclick="location.href='@Url.Action("ExamSchedulers", "Home")'" style="width:110px">
                        Cancel
                    </button>
                    <button type="button" id="btnExamPreview" style="width:110px"
                            class="btn btn-primary"
                            onclick="window.open('@(System.Configuration.ConfigurationManager.AppSettings["clientURL"].ToString())/Home/ExamScreen?AssessmentName=9dd11ea2-9081-4f2b-90f1-8d19bb3b99a6&ProctorID=V00002372', '_blank')">
                        Preview
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="col-xs-12 col-md-5">
        <div class="box-header with-border">
            <h3 class="box-title">Clients</h3>
        </div>
        <div class="box box-default">

            <div class="box-body">
                
                <div class="row">

                    <div class="form-group" style="margin-top:5px;">
                        <table border=1  id="tblExaminee" class="table table-bordered table-hover">
                            <thead>
                                <tr>
                                    <th class="text-center" style="width:5%">
                                        Username
                                    </th>
                                    <th class="text-center" style="width:40%">
                                        Name
                                    </th>
                                    <th class="text-center" style="width:50%;word-wrap:break-word">
                                        Email
                                    </th>
                                    <th class="text-center" style="width:5%">
                                        &nbsp;
                                    </th>
                                </tr>
                            </thead>
                            <tbody @*data-bind="template:{name:'tableRow', foreach: tableRows}"*@>
                                <tr ng-repeat="examineeEntities in ExamineeEntities">
                                    <td style="width:5%">{{examineeEntities.ExamineePNumber}}</td>
                                    <td style="width:40%">{{examineeEntities.ExamineeName}}</td>
                                    <td class="dont-break-out" style="width:50%;word-wrap:break-word">{{examineeEntities.ExamineeEmailId}}</td>
                                    <td style="width:5%;">
                                        <button type=" button" class="btn btn-group-lg btn-primary dropdown-toggle" id="btnAddExaminee" onclick="deleteRow(this)" style="width:110px">
                                        Delete</button>
                                    </td>
                                </tr>
                            </tbody>
                            <tfoot>
                                <tr>
                                    <td align="left" style="padding-right:2px;" colspan="4">
                                        <button type="button" class="btn btn-group-lg btn-primary dropdown-toggle" data-bind="click: addNewRow">
                                            Add Client
                                        </button>
                                    </td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>